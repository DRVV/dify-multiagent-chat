{"version":3,"sources":["/home/yuta_sonoda/projects/dify-multiagent-chat/DifyMultiagentChat/dist/index.js","../src/DifyMultiagentChat.tsx","../src/ChatWindow/index.tsx","../src/ChatWindow/ChatWindow.module.css","../src/constants/agents.ts","../src/components/ChatInput.tsx","../src/styles/DifyMultiagentChat.module.css","../src/hooks/useDifyStream.ts","../src/store/chatStore.ts"],"names":["useEffect","jsx","ChatWindow_default"],"mappings":"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","file":"/home/yuta_sonoda/projects/dify-multiagent-chat/DifyMultiagentChat/dist/index.js","sourcesContent":[null,"'use client';\n\nimport React, { useMemo } from 'react';\nimport ChatWindow from './ChatWindow';\nimport { ChatInput } from './components/ChatInput';\nimport { useDifyStream } from './hooks/useDifyStream';\nimport { useChatStore } from './store/chatStore';\nimport { DifyMultiagentChatProps } from './types';\nimport { SpeakerConfig } from './ChatWindow/types';\nimport styles from './styles/DifyMultiagentChat.module.css';\n\nconst DifyMultiagentChat: React.FC<DifyMultiagentChatProps> = ({\n  config,\n  className = '',\n  title = 'Dify Chat',\n  iconName,\n  iconAlt\n}) => {\n  const { \n    messages, \n    isLoading \n  } = useChatStore();\n  \n  const { sendMessage } = useDifyStream(config);\n\n  // Default speakers for user and assistant\n  const speakers: SpeakerConfig[] = useMemo(() => [\n    { id: 'user', displayName: 'You', color: '#3B82F6' },\n    { id: 'assistant', displayName: 'Assistant', color: '#6B7280' }\n  ], []);\n\n  const handleSendMessage = async (message: string) => {\n    // Add user message immediately\n    const userMessage = {\n      id: Date.now().toString(),\n      content: message,\n      timestamp: new Date(),\n      speaker: 'user',\n      speakerDisplayName: 'You'\n    };\n    \n    useChatStore.getState().addMessage(userMessage);\n    \n    // Send to Dify\n    await sendMessage(message);\n  };\n\n  // Now just use messages directly since streaming messages are added immediately\n  const displayMessages = useMemo(() => {\n    return [...messages];\n  }, [messages]);\n\n  return (\n    <div className={`${styles.container} ${className}`}>\n      {/* 独自ヘッダー */}\n      <div className={styles.customHeader}>\n        <div className={styles.titleWithLogo}>\n          {iconName && (\n            <img \n              src={`/dify-icons/${iconName}`} \n              alt={iconAlt} \n              className={styles.logo} \n            />\n          )}\n          <h3 className={styles.customTitle}>{title}</h3>\n        </div>\n      </div>\n      \n      <div className={styles.chatWindowContainer}>\n        <ChatWindow\n          messages={displayMessages}\n          speakers={speakers}\n          showTimestamps={true}\n          showSpeakers={true}\n        />\n        {isLoading && (\n          <div className={styles.streamingIndicator}>\n            <span className={styles.streamingText}>Assistant is thinking...</span>\n          </div>\n        )}\n      </div>\n      \n      <ChatInput\n        onSendMessage={handleSendMessage}\n        isLoading={isLoading}\n        placeholder=\"Ask me anything...\"\n      />\n    </div>\n  );\n};\n\nexport default DifyMultiagentChat;\nexport type { DifyMultiagentChatProps, DifyConfig } from './types';\n","'use client';\n\nimport React, { useMemo, useEffect, useRef } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport { ChatWindowProps, ChatMessage, SpeakerConfig } from './types';\nimport styles from './ChatWindow.module.css';\nimport { AGENT_ICONS } from '../constants/agents';\n\nconst ChatWindow: React.FC<ChatWindowProps> = ({\n  messages,\n  speakers = [],\n  onExport,\n  className = '',\n  maxHeight = '400px',\n  showTimestamps = true,\n  showSpeakers = true,\n  title = 'Chat',\n}) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Create speaker lookup for efficient access\n  const speakerMap = useMemo(() => {\n    const map = new Map<string, SpeakerConfig>();\n    speakers.forEach(speaker => {\n      map.set(speaker.id, speaker);\n    });\n    return map;\n  }, [speakers]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Format timestamp\n  const formatTimestamp = (timestamp: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    }).format(timestamp);\n  };\n\n  // Default export handler\n  const handleExport = () => {\n    if (onExport) {\n      onExport(messages);\n    } else {\n      // Built-in export functionality\n      const exportData = messages.map(msg => ({\n        timestamp: msg.timestamp.toISOString(),\n        speaker: msg.speaker,\n        speakerDisplayName: msg.speakerDisplayName,\n        content: msg.content,\n        duration: msg.duration,\n      }));\n\n      const dataStr = JSON.stringify(exportData, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `chat-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  return (\n    <div className={`${styles.container} ${className}`}>\n      {/* Header - only show if title is provided */}\n      {title && (\n        <div className={styles.header}>\n          <h3 className={styles.title}>{title}</h3>\n          <button\n            onClick={handleExport}\n            className={styles.exportButton}\n            disabled={messages.length === 0}\n            title=\"Export chat as JSON\"\n          >\n            Export\n          </button>\n        </div>\n      )}\n\n      {/* Messages Container */}\n      <div \n        className={styles.messagesContainer}\n        style={{ maxHeight }}\n      >\n        {messages.length === 0 ? (\n          <div className={styles.emptyState}>\n            <div className={styles.emptyIcon}>💬</div>\n            <div className={styles.emptyText}>No messages yet</div>\n            <div className={styles.emptySubtext}>Messages will appear here when sent</div>\n          </div>\n        ) : (\n          <>\n            {messages.map((message) => {\n              const speaker = speakerMap.get(message.speaker);\n              const displayName = message.speakerDisplayName || speaker?.displayName || message.speaker;\n              const isUser = message.speaker === 'user';\n              const speakerIconPath = !isUser \n                ? (AGENT_ICONS[message.speaker as keyof typeof AGENT_ICONS] || '/dify-icons/default-speaker.svg')\n                : null;\n\n\n              return (\n                <div key={message.id} className={isUser ? styles.messageGroupUser : styles.messageGroup}>\n                  {showSpeakers && (\n                    <div className={isUser ? styles.messageHeaderUser : styles.messageHeader}>\n                      {/* show the icon image when isUser=true */}\n                      {!isUser && speakerIconPath && (\n                        <img\n                          src={speakerIconPath}\n                          alt={`${displayName} icon`}\n                          className={styles.speakerIcon}\n                          onError={(e) => {\n                            e.currentTarget.src = '/dify-icons/default-speaker.svg';\n                          }}\n                        />\n                      )}\n                      <span className={styles.speakerName}>\n                        {displayName}\n                      </span>\n                      {showTimestamps && (\n                        <span className={styles.timestamp}>\n                          {formatTimestamp(message.timestamp)}\n                        </span>\n                      )}\n                    </div>\n                  )}\n                  <div className={isUser ? styles.messageContentUser : styles.messageContent}>\n                    <Markdown>{message.content}</Markdown>\n                  </div>\n                </div>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;\nexport type { ChatWindowProps, ChatMessage, SpeakerConfig };\n",".container {\n  display: flex;\n  flex-direction: column;\n  background: #ffffff;\n  border: 1px solid #e1e5e9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 16px;\n  background: #f8f9fa;\n  border-bottom: 1px solid #e1e5e9;\n}\n\n.title {\n  font-size: 16px;\n  font-weight: 600;\n  color: #495057;\n  margin: 0;\n}\n\n.exportButton {\n  padding: 6px 12px;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 12px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.exportButton:hover:not(:disabled) {\n  background: #0056b3;\n}\n\n.exportButton:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n\n.messagesContainer {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-height: 400px;\n}\n\n.messageGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.messageGroupUser {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-items: flex-end;\n}\n\n.messageHeader {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.messageHeaderUser {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n  justify-content: flex-end;\n}\n\n.speakerName {\n  font-weight: 600;\n  font-size: 14px;\n  color: #007bff;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #6c757d;\n}\n\n.messageContent {\n  background: #f8f9fa;\n  padding: 8px 12px;\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #212529;\n  word-wrap: break-word;\n  max-width: 80%;\n  white-space: pre-line;\n  word-wrap: break-word;\n}\n\n.messageContentUser {\n  background: #007bff;\n  color: white;\n  padding: 8px 12px;\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 1.4;\n  word-wrap: break-word;\n  max-width: 80%;\n  white-space: pre-line;\n  word-wrap: break-word;\n}\n\n.emptyState {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 20px;\n  text-align: center;\n  color: #6c757d;\n}\n\n.emptyIcon {\n  font-size: 48px;\n  margin-bottom: 12px;\n  opacity: 0.5;\n}\n\n.emptyText {\n  font-size: 16px;\n  margin-bottom: 4px;\n}\n\n.emptySubtext {\n  font-size: 14px;\n  opacity: 0.7;\n}\n\n/* Scrollbar styling */\n.messagesContainer::-webkit-scrollbar {\n  width: 6px;\n}\n\n.messagesContainer::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n.messagesContainer::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n.messagesContainer::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n.speakerIcon {\n  width: 3.0em;\n  height: 3.0em;\n  border-radius: 50%;\n  margin-right: 4px;\n  object-fit: cover;\n  flex-shrink: 0;\n  vertical-align: middle;\n}","export const ALLOWED_AGENTS = [\n    'Orchestrator',\n    'IC agent',\n    'MD agent',\n    'Store sales agent',\n    'Marketing agent',\n    'GMD agent',\n] as const;\n\nexport type AllowedAgent = typeof ALLOWED_AGENTS[number];\n\nexport const AGENT_ICONS = {\n    'Orchestrator': '/dify-icons/fr-orchestrator.svg',\n    'IC agent': '/dify-icons/fr-ic-agent.svg',\n    'MD agent': '/dify-icons/fr-md-agent.svg',\n    'Store sales agent': '/dify-icons/fr-store-sales-agent.svg',\n    'Marketing agent': '/dify-icons/fr-marketing-agent.svg',\n    'GMD agent': '/dify-icons/fr-gmd-agent.svg',\n} as const;\n","'use client';\n\nimport React, { useState, KeyboardEvent, useRef, useEffect } from 'react';\nimport styles from '../styles/DifyMultiagentChat.module.css';\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n  placeholder?: string;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({ \n  onSendMessage, \n  isLoading, \n  placeholder = \"Type your message...\" \n}) => {\n  const [message, setMessage] = useState('');\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = () => {\n    if (message.trim() && !isLoading) {\n      onSendMessage(message.trim());\n      setMessage('');\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [message]);\n\n  return (\n    <div className={styles.inputContainer}>\n      <div className={styles.inputWrapper}>\n        <textarea\n          ref={textareaRef}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          className={styles.messageInput}\n          rows={1}\n          disabled={isLoading}\n        />\n        <button\n          onClick={handleSend}\n          disabled={isLoading || !message.trim()}\n          className={styles.sendButton}\n          title=\"Send message\"\n        >\n          {isLoading ? (\n            <div style={{\n              width: '16px',\n              height: '16px',\n              border: '2px solid transparent',\n              borderTop: '2px solid white',\n              borderRadius: '50%',\n              animation: 'spin 1s linear infinite'\n            }}></div>\n          ) : (\n            <svg width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n            </svg>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n",".container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-width: 100%;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.customHeader {\n  padding: 16px 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #ffffff;\n  flex-shrink: 0;\n}\n\n.titleWithLogo {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.logo {\n  width: 66px;\n  height: 32px;\n  flex-shrink: 0;\n}\n\n.customTitle {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #333;\n  line-height: 1.2;\n}\n\n.chatWindowContainer {\n  flex: 1;\n  overflow: hidden;\n}\n\n.inputContainer {\n  padding: 16px;\n  border-top: 1px solid #e0e0e0;\n  background: #f9f9f9;\n}\n\n.inputWrapper {\n  display: flex;\n  gap: 8px;\n  align-items: flex-end;\n}\n\n.messageInput {\n  flex: 1;\n  min-height: 20px;\n  max-height: 120px;\n  padding: 12px 16px;\n  border: 1px solid #d0d0d0;\n  border-radius: 24px;\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 1.4;\n  resize: none;\n  outline: none;\n  transition: border-color 0.2s ease;\n}\n\n.messageInput:focus {\n  border-color: #007bff;\n}\n\n.messageInput:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.sendButton {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  font-size: 18px;\n  transition: background-color 0.2s ease, transform 0.1s ease;\n}\n\n.sendButton:hover:not(:disabled) {\n  background: #0056b3;\n  transform: scale(1.05);\n}\n\n.sendButton:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.streamingIndicator {\n  padding: 8px 16px;\n  background: #f0f8ff;\n  border-left: 4px solid #007bff;\n  margin: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #666;\n  font-style: italic;\n}\n\n.streamingText {\n  color: #333;\n  font-style: normal;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n","import { useCallback } from 'react';\nimport { createParser, EventSourceMessage } from 'eventsource-parser';\nimport { DifyConfig, DifySSEEvent, DifyRequestBody } from '../types';\nimport { useChatStore } from '../store/chatStore';\nimport { ALLOWED_AGENTS, AllowedAgent } from '../constants';\n\nexport const useDifyStream = (config: DifyConfig) => {\n  const { \n    setLoading, \n    appendStreamingMessage,\n    completeStreamingMessage,\n    conversationId,\n    setConversationId \n  } = useChatStore();\n\n  const sendMessage = useCallback(async (message: string) => {\n    setLoading(true);\n    // No need to clear streaming message since each chunk creates a new message\n    \n    try {\n      const requestBody: DifyRequestBody = {\n        inputs: {},\n        query: message,\n        response_mode: 'streaming',\n        conversation_id: conversationId,\n        user: config.user || 'user-001'\n      };\n\n      console.log(\"[useDifyStream] Start fetching for body \", requestBody);\n\n      const response = await fetch(`${config.endpoint}/v1/chat-messages`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${config.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('No response body reader available');\n      }\n\n      const decoder = new TextDecoder();\n      // let streamingText = '';\n\n      const parser = createParser({\n        onEvent: (ev: EventSourceMessage) => {\n//          console.log('[useDifyStream] onEvent: ', ev);\n\n          if (true || ev.event === 'message' || ev.event === 'node_finished' || ev.event === 'message_end' || ev.event === 'workflow_started' || ev.event === 'workflow_finished') {\n            try {\n              const eventData = JSON.parse(ev.data) as DifySSEEvent;\n\n              //console.log('[useDifyStream] eventData:', eventData);\n              \n              // Handle different event types\n              switch (eventData.event) {\n                // case 'message':\n                //   if (eventData.answer) {\n                //     streamingText += eventData.answer;\n                //     updateStreamingMessage(streamingText);\n                //   }\n                //   break;\n                  \n                case 'node_finished':\n                  // Primary event type for processing completion\n                  console.log('Node finished:', eventData);\n                  if (\n                    eventData.data?.outputs?.text\n                    && eventData.data.node_type == 'llm'  \n                    && eventData.data?.title\n                    && (ALLOWED_AGENTS).includes(eventData.data.title as AllowedAgent)\n                  ) {\n                    const speaker = eventData.data.title;\n                    console.log(\"Speaker: \", speaker);\n                    // Create a new message entry for each streaming chunk\n                    appendStreamingMessage(eventData.data.outputs.text, speaker, speaker);\n                  }\n                  break;\n                  \n                case 'message_end':\n                  console.log('message_end:', eventData.event, eventData);  \n                \n                  completeStreamingMessage();\n                  if (eventData.conversation_id && eventData.conversation_id !== conversationId) {\n                    setConversationId(eventData.conversation_id);\n                  }\n                  break;\n                  \n                case 'workflow_started':\n                case 'workflow_finished':\n                  console.log('Workflow event:', eventData.event, eventData);\n                  break;\n              }\n            } catch (parseError) {\n              console.log('SSE parse error:', parseError);\n            }\n          }\n        }\n      });\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        parser.feed(chunk);\n      }\n    } catch (error) {\n      console.log('Dify API error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [config, conversationId, setLoading, appendStreamingMessage, completeStreamingMessage, setConversationId]);\n\n  return { sendMessage };\n};\n","import { create } from 'zustand';\nimport { ChatMessage } from '../ChatWindow/types';\n\ninterface ChatState {\n  messages: ChatMessage[];\n  isLoading: boolean;\n  conversationId: string;\n  addMessage: (message: ChatMessage) => void;\n  setLoading: (loading: boolean) => void;\n  appendStreamingMessage: (text: string, speaker?: string, speakerDisplayName?: string) => void;\n  completeStreamingMessage: () => void;\n  setConversationId: (id: string) => void;\n  reset: () => void;\n}\n\nexport const useChatStore = create<ChatState>((set) => ({\n  messages: [],\n  isLoading: false,\n  conversationId: '',\n  \n  addMessage: (message: ChatMessage) => {\n    set((state) => ({\n      messages: [...state.messages, message]\n    }));\n  },\n  \n  setLoading: (loading: boolean) => {\n    set({ isLoading: loading });\n  },\n  \n  appendStreamingMessage: (text: string, speaker?: string, speakerDisplayName?: string) => {\n    const newMessage: ChatMessage = {\n      id: `${Date.now()}-${Math.random()}`,\n      content: text,\n      timestamp: new Date(),\n      speaker: speaker || 'assistant',\n      speakerDisplayName: speakerDisplayName || speaker || 'Assistant'\n    };\n    \n    set((state) => ({\n      messages: [...state.messages, newMessage]\n    }));\n  },\n  \n  completeStreamingMessage: () => {\n    // This function is now mainly for handling conversation ID logic\n    // No need to do anything with streaming messages since they're added immediately\n  },\n  \n  setConversationId: (id: string) => {\n    set({ conversationId: id });\n  },\n  \n  reset: () => {\n    set({\n      messages: [],\n      isLoading: false,\n      conversationId: ''\n    });\n  }\n}));\n"]}