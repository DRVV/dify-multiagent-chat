{"version":3,"sources":["../src/DifyMultiagentChat.tsx","../src/ChatWindow/index.tsx","../src/ChatWindow/ChatWindow.module.css","../src/constants/agents.ts","../src/components/ChatInput.tsx","../src/styles/DifyMultiagentChat.module.css","../src/hooks/useDifyStream.ts","../src/store/chatStore.ts"],"sourcesContent":["'use client';\n\nimport React, { useMemo } from 'react';\nimport ChatWindow from './ChatWindow';\nimport { ChatInput } from './components/ChatInput';\nimport { useDifyStream } from './hooks/useDifyStream';\nimport { useChatStore } from './store/chatStore';\nimport { DifyMultiagentChatProps } from './types';\nimport { SpeakerConfig } from './ChatWindow/types';\nimport styles from './styles/DifyMultiagentChat.module.css';\n\nconst DifyMultiagentChat: React.FC<DifyMultiagentChatProps> = ({\n  config,\n  className = '',\n  title = 'Dify Chat',\n  iconName,\n  iconAlt\n}) => {\n  const { \n    messages, \n    isLoading \n  } = useChatStore();\n  \n  const { sendMessage } = useDifyStream(config);\n\n  // Default speakers for user and assistant\n  const speakers: SpeakerConfig[] = useMemo(() => [\n    { id: 'user', displayName: 'You', color: '#3B82F6' },\n    { id: 'assistant', displayName: 'Assistant', color: '#6B7280' }\n  ], []);\n\n  const handleSendMessage = async (message: string) => {\n    // Add user message immediately\n    const userMessage = {\n      id: Date.now().toString(),\n      content: message,\n      timestamp: new Date(),\n      speaker: 'user',\n      speakerDisplayName: 'You'\n    };\n    \n    useChatStore.getState().addMessage(userMessage);\n    \n    // Send to Dify\n    await sendMessage(message);\n  };\n\n  // Now just use messages directly since streaming messages are added immediately\n  const displayMessages = useMemo(() => {\n    return [...messages];\n  }, [messages]);\n\n  return (\n    <div className={`${styles.container} ${className}`}>\n      {/* ç‹¬è‡ªãƒ˜ãƒƒãƒ€ãƒ¼ */}\n      <div className={styles.customHeader}>\n        <div className={styles.titleWithLogo}>\n          {iconName && (\n            <img \n              src={`/dify-icons/${iconName}`} \n              alt={iconAlt} \n              className={styles.logo} \n            />\n          )}\n          <h3 className={styles.customTitle}>{title}</h3>\n        </div>\n      </div>\n      \n      <div className={styles.chatWindowContainer}>\n        <ChatWindow\n          messages={displayMessages}\n          speakers={speakers}\n          showTimestamps={true}\n          showSpeakers={true}\n        />\n        {isLoading && (\n          <div className={styles.streamingIndicator}>\n            <span className={styles.streamingText}>Assistant is thinking...</span>\n          </div>\n        )}\n      </div>\n      \n      <ChatInput\n        onSendMessage={handleSendMessage}\n        isLoading={isLoading}\n        placeholder=\"Ask me anything...\"\n      />\n    </div>\n  );\n};\n\nexport default DifyMultiagentChat;\nexport type { DifyMultiagentChatProps, DifyConfig } from './types';\n","'use client';\n\nimport React, { useMemo, useEffect, useRef } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport { ChatWindowProps, ChatMessage, SpeakerConfig } from './types';\nimport styles from './ChatWindow.module.css';\nimport { AGENT_ICONS } from '../constants/agents';\n\nconst ChatWindow: React.FC<ChatWindowProps> = ({\n  messages,\n  speakers = [],\n  onExport,\n  className = '',\n  maxHeight = '400px',\n  showTimestamps = true,\n  showSpeakers = true,\n  title = 'Chat',\n}) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Create speaker lookup for efficient access\n  const speakerMap = useMemo(() => {\n    const map = new Map<string, SpeakerConfig>();\n    speakers.forEach(speaker => {\n      map.set(speaker.id, speaker);\n    });\n    return map;\n  }, [speakers]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Format timestamp\n  const formatTimestamp = (timestamp: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    }).format(timestamp);\n  };\n\n  // Default export handler\n  const handleExport = () => {\n    if (onExport) {\n      onExport(messages);\n    } else {\n      // Built-in export functionality\n      const exportData = messages.map(msg => ({\n        timestamp: msg.timestamp.toISOString(),\n        speaker: msg.speaker,\n        speakerDisplayName: msg.speakerDisplayName,\n        content: msg.content,\n        duration: msg.duration,\n      }));\n\n      const dataStr = JSON.stringify(exportData, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `chat-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  return (\n    <div className={`${styles.container} ${className}`}>\n      {/* Header - only show if title is provided */}\n      {title && (\n        <div className={styles.header}>\n          <h3 className={styles.title}>{title}</h3>\n          <button\n            onClick={handleExport}\n            className={styles.exportButton}\n            disabled={messages.length === 0}\n            title=\"Export chat as JSON\"\n          >\n            Export\n          </button>\n        </div>\n      )}\n\n      {/* Messages Container */}\n      <div \n        className={styles.messagesContainer}\n        style={{ maxHeight }}\n      >\n        {messages.length === 0 ? (\n          <div className={styles.emptyState}>\n            <div className={styles.emptyIcon}>ðŸ’¬</div>\n            <div className={styles.emptyText}>No messages yet</div>\n            <div className={styles.emptySubtext}>Messages will appear here when sent</div>\n          </div>\n        ) : (\n          <>\n            {messages.map((message) => {\n              const speaker = speakerMap.get(message.speaker);\n              const displayName = message.speakerDisplayName || speaker?.displayName || message.speaker;\n              const isUser = message.speaker === 'user';\n              const speakerIconPath = !isUser \n                ? (AGENT_ICONS[message.speaker as keyof typeof AGENT_ICONS] || '/dify-icons/default-speaker.svg')\n                : null;\n\n\n              return (\n                <div key={message.id} className={isUser ? styles.messageGroupUser : styles.messageGroup}>\n                  {showSpeakers && (\n                    <div className={isUser ? styles.messageHeaderUser : styles.messageHeader}>\n                      {/* show the icon image when isUser=true */}\n                      {!isUser && speakerIconPath && (\n                        <img\n                          src={speakerIconPath}\n                          alt={`${displayName} icon`}\n                          className={styles.speakerIcon}\n                          onError={(e) => {\n                            e.currentTarget.src = '/dify-icons/default-speaker.svg';\n                          }}\n                        />\n                      )}\n                      <span className={styles.speakerName}>\n                        {displayName}\n                      </span>\n                      {showTimestamps && (\n                        <span className={styles.timestamp}>\n                          {formatTimestamp(message.timestamp)}\n                        </span>\n                      )}\n                    </div>\n                  )}\n                  <div className={isUser ? styles.messageContentUser : styles.messageContent}>\n                    <Markdown>{message.content}</Markdown>\n                  </div>\n                </div>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;\nexport type { ChatWindowProps, ChatMessage, SpeakerConfig };\n",".container {\n  display: flex;\n  flex-direction: column;\n  background: #ffffff;\n  border: 1px solid #e1e5e9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 16px;\n  background: #f8f9fa;\n  border-bottom: 1px solid #e1e5e9;\n}\n\n.title {\n  font-size: 16px;\n  font-weight: 600;\n  color: #495057;\n  margin: 0;\n}\n\n.exportButton {\n  padding: 6px 12px;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 12px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.exportButton:hover:not(:disabled) {\n  background: #0056b3;\n}\n\n.exportButton:disabled {\n  background: #6c757d;\n  cursor: not-allowed;\n}\n\n.messagesContainer {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-height: 400px;\n}\n\n.messageGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.messageGroupUser {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-items: flex-end;\n}\n\n.messageHeader {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.messageHeaderUser {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n  justify-content: flex-end;\n}\n\n.speakerName {\n  font-weight: 600;\n  font-size: 14px;\n  color: #007bff;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #6c757d;\n}\n\n.messageContent {\n  background: #f8f9fa;\n  padding: 8px 12px;\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #212529;\n  word-wrap: break-word;\n  max-width: 80%;\n  white-space: pre-line;\n  word-wrap: break-word;\n}\n\n.messageContentUser {\n  background: #007bff;\n  color: white;\n  padding: 8px 12px;\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 1.4;\n  word-wrap: break-word;\n  max-width: 80%;\n  white-space: pre-line;\n  word-wrap: break-word;\n}\n\n.emptyState {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px 20px;\n  text-align: center;\n  color: #6c757d;\n}\n\n.emptyIcon {\n  font-size: 48px;\n  margin-bottom: 12px;\n  opacity: 0.5;\n}\n\n.emptyText {\n  font-size: 16px;\n  margin-bottom: 4px;\n}\n\n.emptySubtext {\n  font-size: 14px;\n  opacity: 0.7;\n}\n\n/* Scrollbar styling */\n.messagesContainer::-webkit-scrollbar {\n  width: 6px;\n}\n\n.messagesContainer::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n.messagesContainer::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n.messagesContainer::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n.speakerIcon {\n  width: 3.0em;\n  height: 3.0em;\n  border-radius: 50%;\n  margin-right: 4px;\n  object-fit: cover;\n  flex-shrink: 0;\n  vertical-align: middle;\n}","export const ALLOWED_AGENTS = [\n    'Orchestrator',\n    'IC agent',\n    'MD agent',\n    'Store sales agent',\n    'Marketing agent',\n    'GMD agent',\n] as const;\n\nexport type AllowedAgent = typeof ALLOWED_AGENTS[number];\n\nexport const AGENT_ICONS = {\n    'Orchestrator': '/dify-icons/fr-orchestrator.svg',\n    'IC agent': '/dify-icons/fr-ic-agent.svg',\n    'MD agent': '/dify-icons/fr-md-agent.svg',\n    'Store sales agent': '/dify-icons/fr-store-sales-agent.svg',\n    'Marketing agent': '/dify-icons/fr-marketing-agent.svg',\n    'GMD agent': '/dify-icons/fr-gmd-agent.svg',\n} as const;\n","'use client';\n\nimport React, { useState, KeyboardEvent, useRef, useEffect } from 'react';\nimport styles from '../styles/DifyMultiagentChat.module.css';\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n  placeholder?: string;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({ \n  onSendMessage, \n  isLoading, \n  placeholder = \"Type your message...\" \n}) => {\n  const [message, setMessage] = useState('');\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = () => {\n    if (message.trim() && !isLoading) {\n      onSendMessage(message.trim());\n      setMessage('');\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [message]);\n\n  return (\n    <div className={styles.inputContainer}>\n      <div className={styles.inputWrapper}>\n        <textarea\n          ref={textareaRef}\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          className={styles.messageInput}\n          rows={1}\n          disabled={isLoading}\n        />\n        <button\n          onClick={handleSend}\n          disabled={isLoading || !message.trim()}\n          className={styles.sendButton}\n          title=\"Send message\"\n        >\n          {isLoading ? (\n            <div style={{\n              width: '16px',\n              height: '16px',\n              border: '2px solid transparent',\n              borderTop: '2px solid white',\n              borderRadius: '50%',\n              animation: 'spin 1s linear infinite'\n            }}></div>\n          ) : (\n            <svg width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n            </svg>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n",".container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-width: 100%;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.customHeader {\n  padding: 16px 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #ffffff;\n  flex-shrink: 0;\n}\n\n.titleWithLogo {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.logo {\n  width: 66px;\n  height: 32px;\n  flex-shrink: 0;\n}\n\n.customTitle {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #333;\n  line-height: 1.2;\n}\n\n.chatWindowContainer {\n  flex: 1;\n  overflow: hidden;\n}\n\n.inputContainer {\n  padding: 16px;\n  border-top: 1px solid #e0e0e0;\n  background: #f9f9f9;\n}\n\n.inputWrapper {\n  display: flex;\n  gap: 8px;\n  align-items: flex-end;\n}\n\n.messageInput {\n  flex: 1;\n  min-height: 20px;\n  max-height: 120px;\n  padding: 12px 16px;\n  border: 1px solid #d0d0d0;\n  border-radius: 24px;\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 1.4;\n  resize: none;\n  outline: none;\n  transition: border-color 0.2s ease;\n}\n\n.messageInput:focus {\n  border-color: #007bff;\n}\n\n.messageInput:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.sendButton {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  font-size: 18px;\n  transition: background-color 0.2s ease, transform 0.1s ease;\n}\n\n.sendButton:hover:not(:disabled) {\n  background: #0056b3;\n  transform: scale(1.05);\n}\n\n.sendButton:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.streamingIndicator {\n  padding: 8px 16px;\n  background: #f0f8ff;\n  border-left: 4px solid #007bff;\n  margin: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #666;\n  font-style: italic;\n}\n\n.streamingText {\n  color: #333;\n  font-style: normal;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n","import { useCallback } from 'react';\nimport { createParser, EventSourceMessage } from 'eventsource-parser';\nimport { DifyConfig, DifySSEEvent, DifyRequestBody } from '../types';\nimport { useChatStore } from '../store/chatStore';\nimport { ALLOWED_AGENTS, AllowedAgent } from '../constants';\n\nexport const useDifyStream = (config: DifyConfig) => {\n  const { \n    setLoading, \n    appendStreamingMessage,\n    completeStreamingMessage,\n    conversationId,\n    setConversationId \n  } = useChatStore();\n\n  const sendMessage = useCallback(async (message: string) => {\n    setLoading(true);\n    // No need to clear streaming message since each chunk creates a new message\n    \n    try {\n      const requestBody: DifyRequestBody = {\n        inputs: {},\n        query: message,\n        response_mode: 'streaming',\n        conversation_id: conversationId,\n        user: config.user || 'user-001'\n      };\n\n      console.log(\"[useDifyStream] Start fetching for body \", requestBody);\n\n      const response = await fetch(`${config.endpoint}/v1/chat-messages`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${config.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('No response body reader available');\n      }\n\n      const decoder = new TextDecoder();\n      // let streamingText = '';\n\n      const parser = createParser({\n        onEvent: (ev: EventSourceMessage) => {\n//          console.log('[useDifyStream] onEvent: ', ev);\n\n          if (true || ev.event === 'message' || ev.event === 'node_finished' || ev.event === 'message_end' || ev.event === 'workflow_started' || ev.event === 'workflow_finished') {\n            try {\n              const eventData = JSON.parse(ev.data) as DifySSEEvent;\n\n              //console.log('[useDifyStream] eventData:', eventData);\n              \n              // Handle different event types\n              switch (eventData.event) {\n                // case 'message':\n                //   if (eventData.answer) {\n                //     streamingText += eventData.answer;\n                //     updateStreamingMessage(streamingText);\n                //   }\n                //   break;\n                  \n                case 'node_finished':\n                  // Primary event type for processing completion\n                  console.log('Node finished:', eventData);\n                  if (\n                    eventData.data?.outputs?.text\n                    && eventData.data.node_type == 'llm'  \n                    && eventData.data?.title\n                    && (ALLOWED_AGENTS).includes(eventData.data.title as AllowedAgent)\n                  ) {\n                    const speaker = eventData.data.title;\n                    console.log(\"Speaker: \", speaker);\n                    // Create a new message entry for each streaming chunk\n                    appendStreamingMessage(eventData.data.outputs.text, speaker, speaker);\n                  }\n                  break;\n                  \n                case 'message_end':\n                  console.log('message_end:', eventData.event, eventData);  \n                \n                  completeStreamingMessage();\n                  if (eventData.conversation_id && eventData.conversation_id !== conversationId) {\n                    setConversationId(eventData.conversation_id);\n                  }\n                  break;\n                  \n                case 'workflow_started':\n                case 'workflow_finished':\n                  console.log('Workflow event:', eventData.event, eventData);\n                  break;\n              }\n            } catch (parseError) {\n              console.log('SSE parse error:', parseError);\n            }\n          }\n        }\n      });\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        parser.feed(chunk);\n      }\n    } catch (error) {\n      console.log('Dify API error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [config, conversationId, setLoading, appendStreamingMessage, completeStreamingMessage, setConversationId]);\n\n  return { sendMessage };\n};\n","import { create } from 'zustand';\nimport { ChatMessage } from '../ChatWindow/types';\n\ninterface ChatState {\n  messages: ChatMessage[];\n  isLoading: boolean;\n  conversationId: string;\n  addMessage: (message: ChatMessage) => void;\n  setLoading: (loading: boolean) => void;\n  appendStreamingMessage: (text: string, speaker?: string, speakerDisplayName?: string) => void;\n  completeStreamingMessage: () => void;\n  setConversationId: (id: string) => void;\n  reset: () => void;\n}\n\nexport const useChatStore = create<ChatState>((set) => ({\n  messages: [],\n  isLoading: false,\n  conversationId: '',\n  \n  addMessage: (message: ChatMessage) => {\n    set((state) => ({\n      messages: [...state.messages, message]\n    }));\n  },\n  \n  setLoading: (loading: boolean) => {\n    set({ isLoading: loading });\n  },\n  \n  appendStreamingMessage: (text: string, speaker?: string, speakerDisplayName?: string) => {\n    const newMessage: ChatMessage = {\n      id: `${Date.now()}-${Math.random()}`,\n      content: text,\n      timestamp: new Date(),\n      speaker: speaker || 'assistant',\n      speakerDisplayName: speakerDisplayName || speaker || 'Assistant'\n    };\n    \n    set((state) => ({\n      messages: [...state.messages, newMessage]\n    }));\n  },\n  \n  completeStreamingMessage: () => {\n    // This function is now mainly for handling conversation ID logic\n    // No need to do anything with streaming messages since they're added immediately\n  },\n  \n  setConversationId: (id: string) => {\n    set({ conversationId: id });\n  },\n  \n  reset: () => {\n    set({\n      messages: [],\n      isLoading: false,\n      conversationId: ''\n    });\n  }\n}));\n"],"mappings":"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","names":["useMemo","ChatWindow_default","useRef","useEffect","jsx","jsxs","useRef","useEffect","jsx","jsxs","useMemo","ChatWindow_default","DifyMultiagentChat_default"]}